import random

p = 30937339651019945892244794266256713890440922455872051984768764821736576084296075471241474533335191134590995377857533
a = 24699516740398840043612817898240834783822030109296416539052220535505263407290501127985941395251981432741860384780927
b = 24561086537518854907476957344600899117700350970429030091546712823181765905950742731855058586986320754303922826007424
E = EllipticCurve(GF(p), [a,b])
G = E([1305488802776637960515697387274764814560693662216913070824404729088258519836180992623611650289275235949409735080408, 2840284555446760004012395483787208388204705580027573689198385753943125520419959469842139003551394700125370894549378])

# n = G.order()
n = 30937339651019945892244794266256713890440922455872051984762505561763526780311616863989511376879697740787911484829297

client_pubkey = E([3902729749136290727021456713077352817203141198354795319199240365158569738643238197536678384836705278431794896368793,8229109857867260486993831343979405488668387983876094644791511977475828392446562276759399366591204626781463052691989])
server_pubkey = E([27688886377906486650974531457404629460190402224453915053124314392088359043897605198852944594715826578852025617899270,20559737347380095279889465811846526151405412593746438076456912255094261907312918087801679069004409625818172174526443])
# Largest prime factor in n
p_0 = 7072010737074051173701300310820071551428959987622994965153676442076542799542912293
# Multiply p0 by server pubkey to yield point with smaller order
Q = p_0 * server_pubkey
# Find the discrete log of Q
a = G.discrete_log(Q)
# Solve `a = p_0 * b (mod n)` where b < 2**128
g, x, y = xgcd(p_0, n)
b0 = (x * (a // g)) % n
solutions = []

for i in range(g):
    s = (b0 + i * (n // g)) % n
    if s > 2**128:
        break
    
    solutions.append(s)

print("here")

for s in solutions:
    if s * G == client_pubkey:
        print(f"Found private key: {s}")
